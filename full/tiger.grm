structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS
  | RECURSIVE_UNION

%nonterm  program of A.exp
		| exp of A.exp
		| decs of A.dec list
		| dec of A.dec
		| tydec_record of {name: A.symbol, ty: A.ty, pos: pos} 
		| tydec_records of {name: A.symbol, ty: A.ty, pos: pos} list
		| tydec of A.dec
		| ty of A.ty
		| tyfield of A.field list
		| tyfield_seq of A.field list
		| tyfields of A.field list
		| vardec of A.dec
		| fundec of A.dec
		| fundecs of A.fundec list
		| function_dec of A.fundec
		| lvalue of A.var 
		| lvalue_tail of A.var -> A.var 
		| exp_tail of (A.exp * pos) list
		| expseq of (A.exp * pos) list
		| exp_seq_comma of A.exp list
		| exps_comma of A.exp list
		| idexp of (A.symbol * A.exp * pos ) list 
		| idexp_seq of (A.symbol * A.exp * pos ) list  
		| idexps of (A.symbol * A.exp * pos ) list 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%right RECURSIVE_UNION
%right FUNCTION TYPE
%right ASSIGN DO OF THEN ELSE 
%left AND OR
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program       : exp                                                   ( exp )

dec           : tydec                                                 ( tydec )
              | vardec                                                ( vardec )
              | fundec                                                ( fundec )

decs          : dec decs                                              ( [dec] @ decs )
              |                                                       ( [] )

tydec_record  : TYPE ID EQ ty                                         ( {name = Symbol.symbol(ID), ty = ty, pos = TYPEleft} )

tydec_records : tydec_record tydec_records                            ( tydec_record :: tydec_records )
              | tydec_record                    %prec RECURSIVE_UNION ( [tydec_record] )

tydec         : tydec_records                                         ( A.TypeDec( tydec_records ) )

ty            : ID                                                    ( A.NameTy( Symbol.symbol(ID), IDleft ) )
              | LBRACE tyfields RBRACE                                ( A.RecordTy( tyfields ) )
              | ARRAY OF ID                                           ( A.ArrayTy( Symbol.symbol(ID), IDleft ) )

tyfield       : ID COLON ID                                           ( [{name = Symbol.symbol(ID1), escape = ref true, typ = Symbol.symbol(ID2), pos = ID1left}] )

tyfield_seq   : tyfield                                               ( tyfield )
              | tyfield_seq COMMA tyfield                             ( tyfield_seq @ tyfield )

tyfields      : tyfield_seq                                           ( tyfield_seq )
              |                                                       ( [] )

vardec        : VAR ID ASSIGN exp                                     ( A.VarDec( {name = Symbol.symbol(ID), escape = ref true, typ = NONE, init = exp, pos = VARleft} ) )
              | VAR ID COLON ID ASSIGN exp                            ( A.VarDec( {name = Symbol.symbol(ID1), escape = ref true, typ = SOME(Symbol.symbol(ID2),ID2left), init = exp, pos = VARleft} ) )

function_dec  : FUNCTION ID LPAREN tyfields RPAREN EQ exp             ( {name = Symbol.symbol(ID), params = tyfields, result = NONE, body = exp, pos = FUNCTIONleft} )
              | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp    ( {name = Symbol.symbol(ID1), params = tyfields, result = SOME(Symbol.symbol(ID2), ID2left), body = exp, pos = FUNCTIONleft} )

fundecs       : function_dec fundecs                                  ( function_dec :: fundecs )
              | function_dec                    %prec RECURSIVE_UNION ( [function_dec] )

fundec        : fundecs                                               ( A.FunctionDec(fundecs) )

lvalue        : ID lvalue_tail                                        ( lvalue_tail(A.SimpleVar( Symbol.symbol(ID), IDleft )) )

lvalue_tail   :                                                       ( fn (parent) => parent )
              | DOT ID lvalue_tail                                    ( fn (parent) => lvalue_tail(A.FieldVar( parent, Symbol.symbol(ID), DOTleft)) )
              | LBRACK exp RBRACK lvalue_tail                         ( fn (parent) => lvalue_tail(A.SubscriptVar( parent, exp, LBRACKleft )) )

exp           : lvalue                                                ( A.VarExp( lvalue ) )
              | NIL                                                   ( A.NilExp )
              | LPAREN exp SEMICOLON exp exp_tail RPAREN              ( A.SeqExp( (exp1, exp1left) :: (exp2, exp2left) :: exp_tail ) )
              | LPAREN RPAREN                                         ( A.SeqExp( [] ) )
              |	INT                                                   ( A.IntExp( INT ) )
              | STRING                                                ( A.StringExp( STRING, STRINGleft ) )
              | ID LPAREN exps_comma RPAREN                           ( A.CallExp( {func=Symbol.symbol(ID), args=exps_comma, pos=IDleft} ) )
              | MINUS exp                                %prec UMINUS ( A.OpExp( {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=expleft} ) )
              | exp PLUS exp                                          ( A.OpExp( {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left} ) )
              | exp MINUS exp                                         ( A.OpExp( {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left} ) )
              | exp TIMES exp                                         ( A.OpExp( {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left} ) )
              | exp DIVIDE exp                                        ( A.OpExp( {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left} ) )
              | exp EQ exp                                            ( A.OpExp( {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left} ) )
              | exp NEQ exp                                           ( A.OpExp( {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left} ) )
              | exp GT exp                                            ( A.OpExp( {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left} ) )
              | exp LT exp                                            ( A.OpExp( {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left} ) )
              | exp GE exp                                            ( A.OpExp( {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left} ) )
              | exp LE exp                                            ( A.OpExp( {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left} ) )
              | exp AND exp                                           ( A.IfExp( {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left} ) )
              | exp OR exp                                            ( A.IfExp( {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left} ) )
              | ID LBRACE idexps RBRACE                               ( A.RecordExp( {fields=idexps, typ=Symbol.symbol(ID), pos=IDleft} ) )
              | ID LBRACK exp RBRACK OF exp                           ( A.ArrayExp( {typ=Symbol.symbol(ID), size=exp1, init=exp2, pos=IDleft} ) )
              | lvalue ASSIGN exp                                     ( A.AssignExp( {var=lvalue, exp=exp, pos=lvalueleft} ) )
              | IF exp THEN exp ELSE exp                              ( A.IfExp( {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft} ) )
              | IF exp THEN exp                                       ( A.IfExp( {test=exp1, then'=exp2, else'=NONE, pos=IFleft} ) )
              | WHILE exp DO exp                                      ( A.WhileExp( {test=exp1, body=exp2, pos=WHILEleft} ) )
              | FOR ID ASSIGN exp TO exp DO exp                       ( A.ForExp( {var=Symbol.symbol(ID), escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft} ) )
              | BREAK                                                 ( A.BreakExp( BREAKleft ) )
              | LET decs IN expseq END                                ( A.LetExp( {decs=decs, body=A.SeqExp(expseq), pos=LETleft} ) )
              | LPAREN exp RPAREN                                     ( exp )

exp_tail      : SEMICOLON exp exp_tail                                ( (exp, expleft) :: exp_tail )
              |                                                       ( [] )

expseq        :                                                       ( [] )
              | exp exp_tail                                          ( (exp, expleft) :: exp_tail )

exp_seq_comma : exp                                                   ( [exp] )
              | exp_seq_comma COMMA exp                               ( exp_seq_comma @ [exp] )

exps_comma    : exp_seq_comma                                         ( exp_seq_comma )
              |                                                       ( [] )

idexp         : ID EQ exp                                             ( [(Symbol.symbol(ID), exp, IDleft)] )

idexp_seq     : idexp                                                 ( idexp )
              | idexp_seq COMMA idexp                                 ( idexp_seq @ idexp)

idexps        : idexp_seq                                             ( idexp_seq )
              |                                                       ( [] )

